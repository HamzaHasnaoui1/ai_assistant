#!/usr/bin/env python3
"""
Script pour mettre √† jour automatiquement ChromeDriver
T√©l√©charge la version compatible avec votre version de Chrome
"""

import os
import sys
import subprocess
import re
import requests
import zipfile
import platform
from pathlib import Path

def get_chrome_version():
    """R√©cup√®re la version de Chrome install√©e"""
    try:
        if platform.system() == "Windows":
            # Windows - v√©rifier le registre ou le chemin d'installation
            chrome_paths = [
                r"C:\Program Files\Google\Chrome\Application\chrome.exe",
                r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
                os.path.expanduser(r"~\AppData\Local\Google\Chrome\Application\chrome.exe")
            ]
            
            for path in chrome_paths:
                if os.path.exists(path):
                    result = subprocess.run([path, "--version"], 
                                         capture_output=True, text=True, shell=True)
                    if result.returncode == 0:
                        version_match = re.search(r'Chrome\s+(\d+)\.', result.stdout)
                        if version_match:
                            return int(version_match.group(1))
            
            # Fallback: essayer de lancer Chrome
            result = subprocess.run(["chrome", "--version"], 
                                 capture_output=True, text=True, shell=True)
            if result.returncode == 0:
                version_match = re.search(r'Chrome\s+(\d+)\.', result.stdout)
                if version_match:
                    return int(version_match.group(1))
                    
        elif platform.system() == "Darwin":  # macOS
            result = subprocess.run(["/Applications/Google Chrome.app/Contents/MacOS/Google Chrome", "--version"], 
                                 capture_output=True, text=True)
            if result.returncode == 0:
                version_match = re.search(r'Chrome\s+(\d+)\.', result.stdout)
                if version_match:
                    return int(version_match.group(1))
        else:  # Linux
            result = subprocess.run(["google-chrome", "--version"], 
                                 capture_output=True, text=True)
            if result.returncode == 0:
                version_match = re.search(r'Chrome\s+(\d+)\.', result.stdout)
                if version_match:
                    return int(version_match.group(1))
                    
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration de la version Chrome: {e}")
    
    return None

def get_chromedriver_version():
    """R√©cup√®re la version de ChromeDriver install√©e"""
    try:
        result = subprocess.run(["chromedriver", "--version"], 
                             capture_output=True, text=True)
        if result.returncode == 0:
            version_match = re.search(r'ChromeDriver\s+(\d+)\.', result.stdout)
            if version_match:
                return int(version_match.group(1))
    except Exception as e:
        print(f"ChromeDriver non trouv√© ou erreur: {e}")
    
    return None

def download_chromedriver(chrome_version):
    """T√©l√©charge la version compatible de ChromeDriver"""
    try:
        # URL de base pour ChromeDriver
        base_url = "https://chromedriver.storage.googleapis.com"
        
        # Trouver la version compatible (m√™me version majeure)
        chromedriver_version = chrome_version
        
        # T√©l√©charger la liste des versions disponibles
        versions_url = f"{base_url}/LATEST_RELEASE_{chromedriver_version}"
        response = requests.get(versions_url)
        
        if response.status_code == 200:
            chromedriver_version = response.text.strip()
            print(f"Version ChromeDriver compatible trouv√©e: {chromedriver_version}")
        else:
            print(f"Impossible de trouver la version compatible, utilisation de la version {chromedriver_version}")
        
        # D√©terminer la plateforme
        if platform.system() == "Windows":
            platform_name = "win32"
        elif platform.system() == "Darwin":
            platform_name = "mac64"
        else:
            platform_name = "linux64"
        
        # URL de t√©l√©chargement
        download_url = f"{base_url}/{chromedriver_version}/chromedriver_{platform_name}.zip"
        
        print(f"T√©l√©chargement de ChromeDriver depuis: {download_url}")
        
        # T√©l√©charger
        response = requests.get(download_url)
        if response.status_code == 200:
            # Sauvegarder le fichier
            zip_path = "chromedriver.zip"
            with open(zip_path, "wb") as f:
                f.write(response.content)
            
            # Extraire
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(".")
            
            # Nettoyer
            os.remove(zip_path)
            
            # Rendre ex√©cutable sur Unix
            if platform.system() != "Windows":
                os.chmod("chromedriver", 0o755)
            
            print("ChromeDriver t√©l√©charg√© et install√© avec succ√®s!")
            return True
        else:
            print(f"Erreur lors du t√©l√©chargement: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"Erreur lors du t√©l√©chargement: {e}")
        return False

def main():
    print("=== Mise √† jour automatique de ChromeDriver ===\n")
    
    # V√©rifier la version de Chrome
    chrome_version = get_chrome_version()
    if chrome_version is None:
        print("‚ùå Impossible de d√©tecter la version de Chrome")
        print("Assurez-vous que Google Chrome est install√©")
        return False
    
    print(f"‚úÖ Version Chrome d√©tect√©e: {chrome_version}")
    
    # V√©rifier la version de ChromeDriver
    chromedriver_version = get_chromedriver_version()
    if chromedriver_version is not None:
        print(f"‚úÖ Version ChromeDriver actuelle: {chromedriver_version}")
        
        if chromedriver_version == chrome_version:
            print("‚úÖ ChromeDriver est d√©j√† √† jour!")
            return True
        else:
            print(f"‚ö†Ô∏è  Versions incompatibles: Chrome {chrome_version} vs ChromeDriver {chromedriver_version}")
    else:
        print("‚ö†Ô∏è  ChromeDriver non trouv√©")
    
    # T√©l√©charger la version compatible
    print(f"\nüîÑ T√©l√©chargement de ChromeDriver version {chrome_version}...")
    success = download_chromedriver(chrome_version)
    
    if success:
        print("\n‚úÖ ChromeDriver mis √† jour avec succ√®s!")
        print("Vous pouvez maintenant ex√©cuter vos tests Robot Framework")
        return True
    else:
        print("\n‚ùå √âchec de la mise √† jour de ChromeDriver")
        print("Veuillez t√©l√©charger manuellement depuis: https://chromedriver.chromium.org/")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
